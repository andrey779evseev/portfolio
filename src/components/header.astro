---
import type { LocalesType } from '@helpers/locale'
import { LocalesList } from '@helpers/locale'

export type Props = {
  locale: LocalesType
}

type LinkType = {
  href: string
  name: string
  isActive: boolean
}

const { locale } = Astro.props

const [currentLanguage, currentPage] = new URL(Astro.request.url).pathname
  .slice(1)
  .split('/')

const links: LinkType[] = [
  {
    href: `/${currentLanguage}/home`,
    name: locale.header.links.home,
    isActive: currentPage === 'home',
  },
  {
    href: `/${currentLanguage}/projects`,
    name: locale.header.links.projects,
    isActive: currentPage === 'projects',
  },
  {
    href: `/${currentLanguage}/about-me`,
    name: locale.header.links.about,
    isActive: currentPage === 'about-me',
  },
  {
    href: `/${currentLanguage}/contacts`,
    name: locale.header.links.contacts,
    isActive: currentPage === 'contacts',
  },
]
---

<header class='mx-auto w-full max-w-5xl'>
  <div
    class='fixed h-16 w-full max-w-5xl top-0 z-50 bg-background shadow-[0_0_10px_10px_#282C33]'
  >
    <div class='flex items-center justify-between mt-8'>
      <a href='/home' class='flex gap-2 items-center'>
        <img src='/assets/logo-filled.svg' alt='logo' class='h-4 w-4' />
        <span class='font-bold'>Andrew</span>
      </a>
      <div class='flex text-gray'>
        {
          links.map((link, i) => (
            <a
              href={link.href}
              class:list={[
                'font-medium flex',
                { 'text-white': link.isActive, 'ml-8': i !== 0 },
              ]}
            >
              <span class='text-primary'>#</span>
              {link.name}
            </a>
          ))
        }
        <div class='ml-8 cursor-pointer relative group'>
          <div class='flex gap-1'>
            {currentLanguage.toUpperCase()}
            <img src='/assets/arrow-down.svg' alt='arrow-down' />
          </div>
          <div
            class='absolute invisible opacity-0 p-2 border border-gray group-hover:visible group-hover:opacity-100 transition-opacity'
          >
            {
              LocalesList.filter((l) => l !== currentLanguage).map((lang) => (
                <a
                  href={`/${lang}/${currentPage}`}
                  class='block mb-1.5 last:m-0 hover:text-white'
                >
                  {lang.toUpperCase()}
                </a>
              ))
            }
          </div>
        </div>
      </div>
    </div>
  </div>
</header>
